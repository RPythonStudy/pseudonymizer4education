---
title: "Pseudonymizer4education"
description: "판독보고서 등 의료정보의 가명화 예시 프로그램"
author: "BenKorea"
date: "2025-06-20"
date-modified: last-modified
---

## 파일명의 가명화

-   EMR로부터 추출된 자료는 파일명에 환자식별정보가 포함될 수도 있습니다.
-   아래는 파일명이 환자 등록번호로 구성되어 있다고 가정하고, 이를 가명화하는 예시 프로그램입니다.

### 파일 읽어오기

-   이 프로젝트는 data/raw 디렉토리에 에시 판독보고서가 들어 있다고 가정하고 있습니다. 하지만 git 버전관리에서는 제외시켜 두었기 때문에 github에서 프로젝트를 다운로드 하더라도 다운로드 되지 않습니다.
-   연구회에서 분석목적으로 보유한 예시 파일들이 data/raw에 복사된 경우라면 아래과 같이 진행이 가능합니다.

### 가명화 패키지

-   이 프로젝트에서는 가명화 방식으로 가역적이며 일관성을 보장하는 가명화(reversible deterministic pseudonymization)를 채택하였습니다.
-   이를 위해 원본 형식을 유지하는 형식보존암호화(format-preserving encryption)를 적용하였으며, 미국 NIST에서 권장하는 FF1 알고리즘을 구현한 pyffx 파이썬 패키지를 활용하였습니다.
-   pyffx는 파이썬의 패키지로만 구할 수 있어 reticulate 패키지를 설치한 후 파이썬 모듈을 감싸는 방식으로 import 하였습니다.
-   reticulate 패키지에게 파이썬 패키지를 인식시킬려면 이 프로젝트 폴더에 파이썬의 가상환경을 활성화 시키고 pyffx 패키지를 설치하는 방식이 가장 추천됩니다.
-   파이썬 가상환경의 설치는 연구회 웹사이트 해당부분을 참고하시길 바랍니다. (https://rpythonstudy.github.io/website/posts/Python/install/VSCode_setup.html)

```{r}
#| label: excel_column_pseudonymizer

#| label: excel_column_pseudonymizer_simple

excel_column_pseudonymizer_simple <- function(
  excel_path,
  columns          # 가명화할 컬럼명 벡터 (예: c("등록번호", "환자명"))
) {
  library(readxl)
  library(writexl)
  library(reticulate)
  library(dotenv)

  # .env에서 가명화 키 읽기
  dotenv::load_dot_env(".env")
  key_string <- Sys.getenv("PSEUDONYM_KEY")
  if (key_string == "") stop("가명화 키가 환경변수에서 읽히지 않았습니다.")

  pyffx <- import("pyffx")
  KEY <- r_to_py(charToRaw(key_string)) # pyffx (파이썬) 패키지의 암호화 키(key= 인자)는 반드시 bytes 타입

  df <- readxl::read_excel(excel_path)

  columns <- columns[columns %in% names(df)]
  if (length(columns) == 0) stop("지정한 컬럼이 데이터에 없습니다.")

  for (col in columns) {
    vals <- as.character(df[[col]])
    chars <- unique(unlist(strsplit(paste(vals, collapse=""), "")))
    alphabet <- paste(chars, collapse="")
    max_len <- max(nchar(vals, type="chars"), na.rm=TRUE)
    pad_char <- substr(alphabet, 1, 1)

    pseudo_vals <- vapply(seq_along(vals), function(i) {
      v <- vals[i]
      if (is.na(v) || nchar(v)==0) return(NA_character_)
      if (nchar(v) < max_len) {
        v <- paste0(v, paste(rep(pad_char, max_len-nchar(v)), collapse=""))
      }
      if (nchar(v) > max_len) v <- substr(v, 1, max_len)
      cipher <- pyffx$String(KEY, alphabet=alphabet, length=max_len)
      cipher$encrypt(v)
    }, FUN.VALUE=character(1))

    newcol <- paste0("P_", col)
    df[[newcol]] <- pseudo_vals
    idx <- which(names(df)==col)
    names(df)[names(df)==newcol] <- newcol
    df <- df[, c(names(df)[1:(idx-1)], newcol, names(df)[-c(1:idx, which(names(df)==newcol))])]
  }

  outdir <- "data/pseudonymized"
  if (!dir.exists(outdir)) dir.create(outdir, recursive=TRUE)
  outfile <- file.path(outdir, paste0("P_", basename(excel_path)))
  writexl::write_xlsx(df, outfile)
  message("가명화된 결과가 저장되었습니다: ", outfile)

  return(df)
}


```

```{r}
#| label: pseudonymize_result

result <- excel_column_pseudonymizer_simple(
  "data/raw/R_PY_Patho.xlsx",
  columns = "Serial"
)


```

```{r the_end}

```
